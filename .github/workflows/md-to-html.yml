name: Convert Markdown to HTML and Deploy

on:
  push:
    paths:
      - 'md/**'
    branches:
      - main  # or your default branch name

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install marked

      - name: Create converter script
        run: |
          cat > convert.js <<'EOL'
          const fs = require('fs');
          const marked = require('marked');
          const path = require('path');

          function convertMdToHtml(inputFile) {
            try {
              const md = fs.readFileSync(inputFile, 'utf-8');
              const html = marked.parse(md);
              
              let title = 'Untitled';
              const titleMatch = html.match(/<h1>(.*?)<\/h1>/) || html.match(/<h2>(.*?)<\/h2>/);
              if (titleMatch) {
                title = titleMatch[1];
              }
              
              const template = `
                <!DOCTYPE html>
                <html lang='en'>
                <head>
                  <meta charset='UTF-8'>
                  <meta name='viewport' content='width=device-width, initial-scale=1.0'>
                  <title>${title}</title>
                  <link rel='stylesheet' href='../style.css'>
                </head>
                <body>
                  <a href='/' class='home-link'>home</a>
                  <div class='content'>
                    ${html.replace(/src="media\//g, 'src="/media/')}
                  </div>
                  <footer>
                    <a href='https://x.com/karthikeyam'>twitter</a> /
                    <a href='https://www.linkedin.com/in/karthikeyam/'>linkedin</a>
                  </footer>
                </body>
                </html>
              `;
              
              const outputPath = path.join('posts', path.basename(inputFile, '.md') + '.html');
              fs.writeFileSync(outputPath, template);
              console.log(`Successfully created ${outputPath}`);
            } catch (error) {
              console.error(`Error processing ${inputFile}: ${error.message}`);
              process.exit(1);
            }
          }

          const inputFile = process.argv[2];
          convertMdToHtml(inputFile);
          EOL

      - name: Convert MD to HTML
        run: |
          mkdir -p posts
          md_files=(md/*.md)
          if [ ${#md_files[@]} -eq 0 ]; then
            echo "No Markdown files found. Removing all HTML files."
            rm -f posts/*.html
          else
            for file in "${md_files[@]}"; do
              node convert.js "$file"
            done
          fi

      - name: Remove deleted HTML files
        run: |
          for html_file in posts/*.html; do
            [ -e "$html_file" ] || continue  # Skip if no HTML files exist
            md_file="md/$(basename "$html_file" .html).md"
            if [ ! -f "$md_file" ]; then
              rm "$html_file"
              echo "Removed $html_file"
            fi
          done

      - name: Update index.html
        run: |
          if [ ! -f index.html ]; then
            echo "index.html not found. Creating a basic one."
            echo "<html><body><ul class=\"links\"></ul></body></html>" > index.html
          fi
          
          # Clear existing links
          sed -i '/<ul class="links">/,/<\/ul>/c\<ul class="links">' index.html
          
          # Add new links
          for html_file in posts/*.html; do
            [ -e "$html_file" ] || continue  # Skip if no HTML files exist
            filename=$(basename "$html_file")
            title=$(grep -oP '(?<=<title>).*(?=</title>)' "$html_file" || echo "${filename%.*}")
            echo "  <li><a href=\"/posts/$filename\">$title</a></li>" >> index.html
          done
          
          # Close the list
          echo "</ul>" >> index.html

      - name: Check for content
        id: check_content
        run: |
          if [ -z "$(ls -A posts/*.html 2>/dev/null)" ]; then
            echo "No HTML files found in posts directory. Creating a placeholder."
            mkdir -p posts
            echo "<html><body><h1>No content available</h1></body></html>" > posts/placeholder.html
            echo "created_placeholder=true" >> $GITHUB_OUTPUT
          else
            echo "created_placeholder=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Cleanup placeholder
        if: steps.check_content.outputs.created_placeholder == 'true'
        run: |
          rm -f posts/placeholder.html
          echo "Removed placeholder HTML file."